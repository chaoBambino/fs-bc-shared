    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞ (—Å –∏–º–∏—Ç–∞—Ü–∏–µ–π —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—à–∏–±–∫–æ–π)
function checkItemStock(itemName) {
  return new Promise((resolve, reject) => {
    const delay = Math.random() * 500 + 100; // –æ—Ç 100 –¥–æ 600 –º—Å
    setTimeout(() => {
      if (Math.random() < 0.9) {
        resolve({ item: itemName, status: 'in_stock' });
      } else {
        reject(new Error(`–¢–æ–≤–∞—Ä '${itemName}' –∑–∞–∫–æ–Ω—á–∏–ª—Å—è`));
      }
    }, delay);
  });
}

// 2. –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ (–≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω–∞)
function processPayment(orderInfo) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        paymentId: 'pay_' + Math.random().toString(36).slice(2),
        status: 'paid',
        amount: orderInfo.total,
      });
    }, 1000);
  });
}

// 3. –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—à–Ω–∞)
function createOrder(paymentInfo) {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({
        orderId: 'order_' + Math.random().toString(36).slice(2),
        status: 'created',
        paymentId: paymentInfo.paymentId,
      });
    }, 500);
  });
}

// 4. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async function placeOrder(items) {
  console.log(`üõí –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤: ${items.join(', ')}\n`);

  try {
    // –®–∞–≥ 1: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è
    console.log('üîç 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤...');
    const stockPromises = items.map(item => checkItemStock(item));
    const stockResults = await Promise.all(stockPromises);
    console.log('‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏:', stockResults.map(r => r.item).join(', '));

    // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
    console.log('\nüí≥ 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...');
    const totalAmount = items.length * 100; // –¥–æ–ø—É—Å—Ç–∏–º, 100 –∑–∞ —Ç–æ–≤–∞—Ä
    const paymentInfo = await processPayment({ items, total: totalAmount });
    console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª. ID: ${paymentInfo.paymentId}, –°—É–º–º–∞: ${paymentInfo.amount}‚ÇΩ`);

    // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    console.log('\nüì¶ 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...');
    const orderInfo = await createOrder(paymentInfo);
    console.log(`‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID –∑–∞–∫–∞–∑–∞: ${orderInfo.orderId}`);

    console.log('\nüéâ --- –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω ---\n');

  } catch (error) {
    console.error('\n‚ùå --- –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ---');
    console.error('–ü—Ä–∏—á–∏–Ω–∞:', error.message);
    console.error('----------------------------------\n');
  }
}
